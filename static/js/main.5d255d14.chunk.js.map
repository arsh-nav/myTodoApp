{"version":3,"sources":["store/TodoModel.js","store/index.js","components/TodoEntry.js","components/TodoItem.js","components/TodoFooter.js","components/TodoItems.js","App.js","serviceWorker.js","index.js"],"names":["TodoModel","store","title","completed","id","Object","classCallCheck","this","itemsTotal","flagActive","showActive","showCompleted","decorate","observable","toggle","action","Store","todos","lastID","completedItems","notCompletedItems","allItems","flag","push","itemsNum","saveTodos","id2","filter","todo","concat","toConsumableArray","itemTotal","map","length","addTodo","time","pauseClock","startClock","clearCompleted","delACompleted","showFooter","TodoEntry","state","value","handleKeyDown","event","keyCode","preventDefault","_this","trim","todoStore","setState","_this2","react_default","a","createElement","onChange","target","onKeyDown","type","className","placeholder","Component","TodoItem","onToggle","props","checked","onClick","style","float","transform","marginRight","src","maxWidth","observer","TodoFooter","class","showAll","href","TodoItems","TodoFooter_TodoFooter","components_TodoItem","callback","App","components_TodoEntry","components_TodoItems","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.5d255d14.chunk.js","sourcesContent":["import { observable, action, decorate } from \"mobx\";\r\nimport store from \"./index.js\";\r\nexport default class TodoModel {\r\n  store;\r\n  id;\r\n  title;\r\n  completed;\r\n\r\n  constructor(store, title, completed, id) {\r\n    this.title = title;\r\n    this.completed = completed;\r\n    this.id = id;\r\n    this.store = store;\r\n  }\r\n\r\n  toggle() {\r\n    if (!this.completed) this.store.itemsTotal--;\r\n    else this.store.itemsTotal++;\r\n    this.completed = !this.completed;\r\n    if (this.store.flagActive === 1) {\r\n        this.store.showActive();\r\n        // this.store.flagActive = 0;\r\n      } else if (this.store.flagActive === 2) {\r\n        this.store.showCompleted();\r\n        // this.store.flagActive = 0;\r\n      }\r\n  }\r\n}\r\n\r\ndecorate(TodoModel, {\r\n  title: observable,\r\n  completed: observable,\r\n  toggle: action\r\n});\r\n","import { observable, action, decorate } from \"mobx\";\r\nimport TodoModel from \"./TodoModel\";\r\nclass Store {\r\n  todos = [];\r\n  lastID = 0;\r\n  itemsTotal = 0;\r\n  completedItems = [];\r\n  notCompletedItems = [];\r\n  allItems = [];\r\n  flag = false;\r\n  flagActive = 0;\r\n\r\n  addTodo(title) {\r\n    if (this.flag) {\r\n      this.todos = this.allItems;\r\n      this.flag = false;\r\n    }\r\n    this.todos.push(new TodoModel(this, title, false, this.lastID++));\r\n    this.itemsTotal = this.itemsNum();\r\n    this.saveTodos();\r\n    if (this.flagActive === 1) {\r\n      this.showActive();\r\n      this.flagActive = 0;\r\n    } else if (this.flagActive === 2) {\r\n      this.showCompleted();\r\n      this.flagActive = 0;\r\n    }\r\n  }\r\n\r\n  delACompleted(id2) {\r\n    this.todos = this.todos.filter(todo => id2 !== todo.id);\r\n    this.itemsTotal = this.itemsNum();\r\n    this.saveTodos();\r\n  }\r\n\r\n  clearCompleted() {\r\n    this.todos = this.todos.filter(todo => !todo.completed);\r\n    this.saveTodos();\r\n  }\r\n\r\n  showAll() {\r\n    this.todos = this.allItems;\r\n    this.flag = false;\r\n    this.flagActive = 0;\r\n  }\r\n  showActive() {\r\n    this.completedItems = this.allItems.filter(todo => todo.completed);\r\n    this.todos = this.allItems.filter(todo => !todo.completed);\r\n    this.allItems = [...this.completedItems, ...this.todos];\r\n    this.flag = true;\r\n    this.flagActive = 1;\r\n  }\r\n  showCompleted() {\r\n    this.notCompletedItems = this.allItems.filter(todo => !todo.completed);\r\n    this.todos = this.allItems.filter(todo => todo.completed);\r\n    this.allItems = [...this.notCompletedItems, ...this.todos];\r\n    this.flag = true;\r\n    this.flagActive = 2;\r\n  }\r\n  saveTodos() {\r\n    this.allItems = this.todos;\r\n  }\r\n  itemsNum() {\r\n    let itemTotal = 0;\r\n    this.todos.map(todo => {\r\n      if (!todo.completed) itemTotal++;\r\n    });\r\n    return itemTotal;\r\n  }\r\n\r\n  showFooter() {\r\n    if (this.todos.length !== 0) return true;\r\n    else return false;\r\n  }\r\n}\r\n\r\ndecorate(Store, {\r\n  todos: observable,\r\n  addTodo: action,\r\n  itemsTotal: observable,\r\n  time: observable,\r\n  pauseClock: action,\r\n  startClock: action,\r\n  clearCompleted: action,\r\n  delACompleted: action,\r\n  itemsNum: action,\r\n  showFooter: action\r\n});\r\n\r\nconst store = new Store();\r\nexport default store;\r\n","import React, { Component } from \"react\";\r\nimport todoStore from \"../store\";\r\nimport store from \"../store\";\r\nclass TodoEntry extends Component {\r\n  state = {\r\n    value: \"\"\r\n  };\r\n  handleKeyDown = event => {\r\n    if (event.keyCode !== 13) return;\r\n    event.preventDefault();\r\n    if(this.state.value.trim() !== \"\")\r\n    todoStore.addTodo(this.state.value);\r\n    // console.log(this.state.value)\r\n    this.setState({\r\n      value: \"\"\r\n    });\r\n    \r\n  };\r\n  render() {\r\n    return (\r\n      <header>\r\n        \r\n        <h1>todo</h1>\r\n        <input\r\n          value={this.state.value}\r\n          onChange={event => this.setState({ value: event.target.value })}\r\n          onKeyDown={event => this.handleKeyDown(event)}\r\n          type=\"text\"\r\n          className=\"new-todo\"\r\n          placeholder=\"what needs to be done\"\r\n        />\r\n      </header>\r\n    );\r\n  }\r\n}\r\nexport default TodoEntry;\r\n","import React, { Component } from \"react\";\r\nimport { observer } from \"mobx-react\";\r\nimport { decorate } from \"mobx\";\r\nimport store from \"../store\";\r\nclass TodoItem extends Component {\r\n  onToggle = () => {\r\n    this.props.todo.toggle();\r\n  };\r\n  render() {\r\n    const { todo } = this.props;\r\n\r\n    return (\r\n      <div>\r\n        <li className={todo.completed ? \"completed\" : \" \"}>\r\n          <div className=\"view\">\r\n            <input\r\n              onChange={this.onToggle}\r\n              type=\"checkbox\"\r\n              className=\"toggle\"\r\n              value=\"on\"\r\n              checked={todo.completed}\r\n            />\r\n            <label>{todo.title}</label>\r\n            <div>\r\n              <button\r\n                className=\"destry\"\r\n                onClick={() => store.delACompleted(todo.id)}\r\n                style={{\r\n                  float: \"right\",\r\n                  transform: \"translateY(-40px)\",\r\n                  marginRight: \"10px\"\r\n                }}\r\n              >\r\n                <img\r\n                  src=\"Icons/cancel.png\"\r\n                  style={{\r\n                    maxWidth: \"25px\"\r\n                  }}\r\n                />\r\n              </button>\r\n            </div>\r\n          </div>\r\n        </li>\r\n      </div>\r\n    );\r\n  }\r\n}\r\ndecorate(TodoItem, {\r\n  TodoItem: observer\r\n});\r\nexport default TodoItem;\r\n","import { observer } from \"mobx-react\";\r\nimport { decorate } from \"mobx\";\r\nimport store from \"../store\";\r\nimport React,{Component} from 'react';\r\n\r\nexport default class TodoFooter extends Component {\r\n  render() {\r\n    return (\r\n      <footer class=\"footer\">\r\n        <span class=\"todo-count\">\r\n          <strong>{store.itemsTotal}</strong> item left\r\n        </span>\r\n\r\n        <ul class=\"filters\">\r\n          <li onClick={() => store.showAll()}>\r\n            <a class=\"selected\" href=\"#/\">\r\n              All\r\n            </a>\r\n          </li>\r\n          <li onClick={() => store.showActive()}>\r\n            <a href=\"#/\">Active</a>\r\n          </li>\r\n          <li onClick={() => store.showCompleted()}>\r\n            <a href=\"#/\">Completed</a>\r\n          </li>\r\n        </ul>\r\n\r\n        <button class=\"clear-completed\" onClick={() => store.clearCompleted()}>\r\n          Clear completed\r\n        </button>\r\n      </footer>\r\n    );\r\n  }\r\n}\r\ndecorate(TodoFooter, {\r\n    TodoFooter: observer\r\n  });\r\n","import React, { Component } from \"react\";\r\nimport TodoItem from \"./TodoItem\";\r\nimport todoStore from \"../store\";\r\nimport { observer } from \"mobx-react\";\r\nimport { decorate } from \"mobx\";\r\nimport TodoFooter from \"../components/TodoFooter.js\";\r\n\r\nclass TodoItems extends Component {\r\n  callback() {\r\n    if (todoStore.allItems.length !== 0) {\r\n      return <TodoFooter />;\r\n    }\r\n  }\r\n  render() {\r\n    return (\r\n      <section className=\"main\">\r\n        <ul className=\"todo-list\">\r\n          {todoStore.todos.map(todo => {\r\n            return <TodoItem todo={todo} />;\r\n          })}\r\n          {this.callback()}\r\n        </ul>\r\n      </section>\r\n    );\r\n  }\r\n}\r\ndecorate(TodoItems, {\r\n  TodoItems: observer\r\n});\r\nexport default TodoItems;\r\n","import React, { Component } from \"react\";\nimport store from \"./store\";\nimport { observer } from \"mobx-react\";\nimport { decorate } from \"mobx\";\nimport \"./App.css\";\nimport TodoEntry from \"./components/TodoEntry.js\";\nimport TodoItems from \"./components/TodoItems.js\";\nimport TodoFooter from \"./components/TodoFooter.js\";\nclass App extends Component {\n  \n  render() {\n    return (\n      <div id=\"todoapp\" className=\"todoapp\">\n        \n        {/* <button onClick={() => store.clearCompleted()}>ClearComp</button>\n        <button onClick={() => store.showAll()}>All+{\" \"}</button>\n        <button onClick={() => store.showActive()}>Active+{\" \"}</button>\n        <button onClick={() => store.showCompleted()}>Completed+{\" \"}</button> */}\n        <TodoEntry />\n\n        <TodoItems />\n        {/* {a=>{if(a)\n        {<TodoFooter/>}}} */}\n      </div>\n    );\n  }\n}\ndecorate(App, {\n  App: observer\n});\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}